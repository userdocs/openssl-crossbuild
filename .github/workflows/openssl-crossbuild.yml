name: openssl crossbuild package release
on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        name: [openssl]
        os_id: [debian, ubuntu]
        os_codename: [stretch, buster, bullseye, bionic, focal, jammy]
        arch: [amd64, armhf, arm64]
        include:
          - arch: amd64
            cross_openssl: "linux-x86_64"
          - arch: armhf
            cross_openssl: "linux-armv4"
          - arch: arm64
            cross_openssl: "linux-aarch64"
        exclude:
          - os_id: debian
            os_codename: bionic
          - os_id: debian
            os_codename: focal
          - os_id: debian
            os_codename: jammy
          - os_id: ubuntu
            os_codename: stretch
          - os_id: ubuntu
            os_codename: buster
          - os_id: ubuntu
            os_codename: bullseye

    name: ${{ matrix.arch }} ${{ matrix.os_id }}:${{ matrix.os_codename }} ${{ matrix.name }}

    env:
      opt_dir_name: "opt/local"
      github_branch: "master"
      cxx_standard: "17"
      prerelease: false
      GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
    outputs:
      draft_id: ${{ steps.draft_id.outputs.draft_id }}

    steps:
      - name: Host - Checkout action
        uses: actions/checkout@v3

      - name: Host - phased updates # https://github.com/actions/runner-images/issues/7192
        run: echo 'APT::Get::Always-Include-Phased-Updates "false";' | sudo tee /etc/apt/apt.conf.d/99-phased-updates

      - name: Host - set up lunar repo -t lunar
        run: |
          printf '%b\n' 'Package: *\nPin: release n=lunar\nPin-Priority: 50' | sudo tee /etc/apt/preferences
          printf '%b\n' 'deb http://archive.ubuntu.com/ubuntu/ lunar main universe restricted' | sudo tee /etc/apt/sources.list.d/lunar.list

      - name: Host - update
        run: sudo apt-get update

      # - name: Host - upgrade
      #   run: sudo apt-get -y upgrade

      - name: Host - set up qemu-user-static binfmt-support from lunar
        run: sudo apt install -t lunar libpipeline1 qemu-user-static binfmt-support

      ### Why are we doing it like this and not using a container setup? That's how you're supposed to do it right?
      ### qemu-user-static and binfmt-support are not part of the runner imager https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2204-Readme.md
      ### We would need to modify the runner to install these before the container starts. Which you cannot do as there is no way to bootstrap the host.
      ### So we install them on the host then create/pull a custom docker image that we use to build teh multiarch targets.
      ### We are always on the host runner but can use any docker image we need with the access the qemu emulation required.
      ###
      ### We are using these pre configured toolchain images that allows me to remove 50% of the code/time from this action.
      ###
      ### https://github.com/userdocs/dcb/blob/main/Dockerfile

      - name: Host - Create docker multiarch ${{ matrix.arch }} container
        run: docker run --name multiarch -it -d -u 1001 -v ${{ github.workspace }}:/home/github ghcr.io/userdocs/dcb:${{ matrix.os_id }}-${{ matrix.os_codename }}-${{ matrix.arch }}

      ###############################################

      - name: Docker - zlib-ng download and install
        run: |
          docker exec multiarch curl -sNL "https://github.com/userdocs/zlib-ng-crossbuild/releases/latest/download/${{ matrix.os_id }}-${{ matrix.os_codename }}-zlib-ng-${{ matrix.arch }}.deb" -o ${{ matrix.os_id }}-${{ matrix.os_codename }}-zlib-ng-${{ matrix.arch }}.deb
          docker exec multiarch sudo dpkg -i ${{ matrix.os_id }}-${{ matrix.os_codename }}-zlib-ng-${{ matrix.arch }}.deb

      - name: Host - Git clone ${{ matrix.name }} ${{ env.github_branch }}
        run: git clone --single-branch --branch "${{ env.github_branch }}" --shallow-submodules --recurse-submodules --depth 1 https://github.com/openssl/openssl.git ${{ matrix.name }}

      - name: Host - Set ${{ matrix.name }} version to variable
        run: echo "openssl_version=$(source openssl/VERSION.dat; printf '%s' "$MAJOR.$MINOR.$PATCH")" >> $GITHUB_ENV

      - name: Docker - ${{ matrix.name }} configure
        run: docker exec -w /home/github/openssl multiarch ./Configure ${{ matrix.cross_openssl }} --prefix="/home/github/build/${{ env.opt_dir_name }}" --libdir=lib --openssldir=/etc/ssl zlib

      - name: Docker - dump preferences for openssl
        run: docker exec -w /home/github/openssl multiarch perl configdata.pm --dump

      - name: Docker - Make build openssl
        run: docker exec -w /home/github/openssl multiarch make -j $(nproc)

      - name: Docker - Make install_sw openssl
        run: docker exec -w /home/github/openssl multiarch make install_sw

      - name: Host - Set deb dependencies for openssl
        run: echo "openssl-deb-deps=zlib-ng" >> $GITHUB_ENV

      - name: Docker - ldconfig - create /etc/ld.so.conf.d/openssl.conf
        run: |
          docker exec -w /home/github/build multiarch mkdir -p etc/ld.so.conf.d
          docker exec -w /home/github/build/etc/ld.so.conf.d multiarch bash -c "echo '/${{ env.opt_dir_name }}/lib' > openssl.conf"

      - name: Host - Create deb packages
        uses: jiro4989/build-deb-action@v2
        with:
          package: "${{ matrix.name }}"
          package_root: build
          maintainer: userdocs
          compress_type: gzip
          version: "${{ env.openssl_version }}"
          depends: "${{ env.openssl-deb-deps }}"
          arch: "${{ matrix.arch }}"
          desc: "${{ matrix.name }}-${{ env.openssl_version }}-${{ matrix.arch }} for ${{ matrix.os_id }}-${{ matrix.os_codename }}"

      - name: Host - Remove version from release name and use hyphens
        run: mv -f "${{ matrix.name }}_${{ env.openssl_version }}_${{ matrix.arch }}.deb" "${{ matrix.os_id }}-${{ matrix.os_codename }}-${{ matrix.name }}-${{ matrix.arch }}.deb"

      - name: Host - "Create release - tag - assets"
        id: release_id
        uses: ncipollo/release-action@v1
        with:
          prerelease: ${{ env.prerelease }}
          draft: "true"
          artifacts: "${{ matrix.os_id }}-${{ matrix.os_codename }}-${{ matrix.name }}-${{ matrix.arch }}.deb"
          replacesArtifacts: true
          tag: "${{ env.openssl_version }}"
          name: "${{ matrix.name }} ${{ env.openssl_version }}"
          body: "${{ matrix.name }} built from github master on amd64 arm64 armhf for Debian Stretch Buster Bullseye and Ubuntu bionic Focal"
          allowUpdates: true

      - name: proces
        id: draft_id
        run: echo "draft_id=${{ steps.release_id.outputs.id }}" >> $GITHUB_OUTPUT

  publish_draft:
    name: Publish Drafts
    runs-on: ubuntu-latest
    needs: [build]
    env:
      GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
    steps:
      - name: Update draft to release
        run: |
          drafts=("${{ needs.build.outputs.draft_id }}")
          for d in "${drafts[@]}"; do
              gh api --silent /repos/${{ github.repository }}/releases/${d} -F 'draft=false'
          done
